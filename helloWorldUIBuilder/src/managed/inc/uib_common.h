
/*******************************************************************************
* This file was generated by UI Builder.
* This file will be auto-generated each and everytime you save your project.
* Do not hand edit this file.
********************************************************************************/

#ifndef __UIB_COMMON_H__
#define __UIB_COMMON_H__

#define	KEY_VIEW_CONTEXT	"uib,view,context"
#define	KEY_VIEW_CREATE		"uib,view,create"
#define	KEY_VIEW_DESTROY	"uib,view,destroy"

typedef struct _uib_view_context
{
	Evas_Object* 	parent;
	Evas_Object* 	root_container;
	const char*  	view_name;
} uib_view_context;

/**
 * Set the member using strdup() or malloc() because it will be deleted by free().
 */
 typedef struct _uib_genlist_item
{
	char *label;
	char *sub_label;
	char *icon_path;
	char *icon_standard;
	char *end_icon_path;
	char *end_icon_standard;
} uib_genlist_item;

/**
 * Set the member using strdup() or malloc() because it will be deleted by free().
 */
typedef struct _uib_gengrid_item
{
	char *label;
	char *icon_path;
} uib_gengrid_item;

/**
 * @brief Item class for gengrid item
 */
extern Elm_Gengrid_Item_Class* Uib_Gengrid_Itc;

/**
 * @brief Item class for genlist item
 */
extern Elm_Gengrid_Item_Class* Uib_Genlist_Itc;

/**
 * @brief Initialize the gengrid item class
 */
void initialize_gengrid_class(const char*);

/**
 * @brief Initialize the circle genlist item class
 */
void initialize_circle_genlist_class(const char*);

/**
 * @brief Create Item for multibuttonentry
 * @param[in]   multibuttonentry     item container
 * @param[in]   label    item label
 * @param[in]   func     callback function to be called when item is selected
 * @param[in]   data     data to be transferred to the callback function
 * @returns created item
 */
Elm_Object_Item* create_multibuttonentry_item(Evas_Object* multibuttonentry, const char* label, Evas_Smart_Cb func, void* data);

/**
 * @brief Create Item for gengrid
 * @param[in]   gengrid     item container
 * @param[in]   style    item style
 * @param[in]   label    item label
 * @param[in]   path     resource path such as location of the image
 * @param[in]   func     callback function to be called when item is selected
 * @param[in]   data     data to be transferred to the callback function
 * @returns created item
 */
Elm_Object_Item* create_gengrid_item(Evas_Object* gengrid, const char* style, const char* label, const char* path, Evas_Smart_Cb func, void* data);

/**
 * @brief Create Item for genlist
 * @param[in]   gengrid            item container
 * @param[in]   label              item label
 * @param[in]   sub_label          item sub label
 * @param[in]   icon_path          resource path such as location of the image
 * @param[in]   icon_standard      standard icon name
 * @param[in]   end_icon_path      resource path such as location of the image
 * @param[in]   end_icon_standard  standard icon name
 * @param[in]   parent             parent item used in tree item type
 * @param[in]   style              item style: default, groupindex, etc..
 * @param[in]   func               callback function to be called when item is selected
 * @param[in]   data               data to be transferred to the callback function
 * @returns created item
 */
Elm_Object_Item* create_circle_genlist_item(Evas_Object* genlist, const char* label, const char* sub_label, const char* icon_path, const char* icon_standard, const char* end_icon_path, const char* end_icon_standard, Elm_Object_Item* parent, const char* style, Evas_Smart_Cb func, void* data);

/**
 * @brief Set the base scale of the application.
 */
void base_scale_set();


/**
 * @brief Create startup view
 * @param[in]   win     EFL Window
 * @return uib_view_context
 */
uib_view_context * startup_view_create(void* ad);

/**
 * @brief Method to change the page
 * @param[in]	naviframe		The naviframe object
 * @param[in]	title_label		The label in the title area. The name of the title label part is "elm.text.title"
 * @param[in]	prev_btn		The button to go to the previous item. If it is NULL,then naviframe will create a back button automatically. 
 *								The name of the prev_btn part is "elm.swallow.prev_btn"
 * @param[in]	next_btn		The button to go to the next item. Or It could be just an extra function button.
 *								The name of the next_btn part is "elm.swallow.next_btn"
 * @param[in]	view_name       Name of the view to push into the naviframe
 * @param[in]	item_style     	The current item style name. @c NULL would be default.
 * @return The created item or @c NULL upon failure.
 */
Elm_Object_Item* change_page(Evas_Object *naviframe, const char *title_label,
		Evas_Object *prev_btn, Evas_Object *next_btn, char *view_name,
		const char *item_style);

/**
 * @brief Call a callback on view creation
 * @param[in]   vc 			view context
 * @param[in]   obj			The root container UI Component of this view
 * @param[in]   event_info	pointer to an event specific struct or information to pass to the callback functions registered on this event
 */
void uib_view_create_callback(void* vc, Evas* e, Evas_Object* obj, void* event_info) ;


/**
 * @brief Call a callback on view termination
 * @param[in]   vc 			view context
 * @param[in]   obj			The root container UI Component of this view
 * @param[in]   event_info	pointer to an event specific struct or information to pass to the callback functions registered on this event
 */
void uib_view_destroy_callback(void* vc, Evas* e, Evas_Object* obj, void* event_info) ;

void win_create(void *data);
void win_destroy(void *data);

#endif /* __UIB_COMMON_H__ */


