<!DOCTYPE html>
<html>
	<head>
		<meta name="viewport" content="width=device-width, user-scalable=no">
		<title>Hello TAU</title>
		<link rel="stylesheet" href="lib/tau/wearable/theme/default/tau.css"/>
		<link rel="stylesheet" media="all" href="lib/tau/wearable/theme/default/tau.circle.min.css">
		<!--load theme file for your application-->
		<link rel="stylesheet"href="css/style.css"/>
	</head>
	<body>
	
	<div class="ui-page ui-page-active" id="robotControl">
	<header class="ui-header" id="header">
  	</header>
	   <div class="ui-content" style="position:absolute;">
	   		<canvas id="canvas" width="360" height="360" style="position:relative; top:0px;letter-spacing: 0px;"></canvas>
	   
	   </div>

	  
	<script>
	document.getElementById("canvas").style.backgroundColor = "white";
	document.getElementById("header").style.backgroundColor = "white";
	
	var ws='';
	var url= window.localStorage.getItem('url').toString();	
	console.log("connecting to: "+url);  		  
	ws = new WebSocket(url);
	

	////////// Websocket related functions /////////
	ws.onopen = function() {
		ws.send('Ping'); // Send the message 'Ping' to the server
	};
	ws.onclose = function() {
		
	};
	ws.onmessage = function(msg) {
		console.log(msg); // Send the message 'Ping' to the server
	};
	ws.onerror = function () {
		console.error("Websocket Error!");
	};
	///////////////////////////////////////////////
	
	
	//////////////////Events//////////////////////
	var page = document.getElementById("robotControl");
	
	// Rotary Events //
    var rotaryEventHandler = function(e)
    {
        
        var ev_time=tizen.time.getCurrentDateTime().getSeconds()+"."+tizen.time.getCurrentDateTime().getMilliseconds();
       if (e.detail.direction === "CW")
       {
    	   console.log("Rotate CW:\t'"+ ev_time);
    	   ws.send("CW\t"+ev_time);
    	   
       }
       else if (e.detail.direction === "CCW") 
       {
    	   console.log("Rotate CCW:\t"+tizen.time.getCurrentDateTime().getMilliseconds());
    	   ws.send("CCW\t"+ev_time);
    	   
       }
        
    };

	window.addEventListener("rotarydetent", rotaryEventHandler);	
	
	
	////// Touch Events //////


	// Multitouch Events //
	var touchDownT = 0;
	var touchType = "";
	var touchDownXY = [0,0];
	
    var multiTouchHandler = function(e){
    	if(ws.readyState==1){
            touchDownT = Date.now();
    		e.preventDefault();
			touchDownXY[0] = e.touches[0].pageX;
			touchDownXY[1] = e.touches[0].pageY;
						
			var touchCount = e.touches.length;
			console.log("touches: " + touchCount);
			ws.send("Touches: " + touchCount);
			
			
			if(touchCount==2){
	    		console.log("2 finger press");
	    		touchType = "Two Finger";
	    		ws.send(touchType + " Press");
	    		document.getElementById("canvas").style.backgroundColor = "blue";
	    		document.getElementById("header").style.backgroundColor = "blue";
			}
			else if(touchCount==1){
	    		console.log("1 finger press");
	    		touchType = "One Finger";
	    		ws.send(touchType + " Press");
	    		document.getElementById("canvas").style.backgroundColor = "red";
	    		document.getElementById("header").style.backgroundColor = "red";
			}
			else{
	    		console.log("Error");
	    		ws.send("Unknown");
			}
			
    	}
    	else{
        	console.log("Websocket not ready for touch event");
        	}
    }

    // TODO watchdog callback to check connection is okay - but websocket error function should handle this....
    var watchdogTouchHandler = function(e){
    	if(ws.readyState==1){

    	}
    	else{
        	console.log("Websocket not ready for touch event");
      	}
    }
    
    var endTouchHandler = function(e){
        var dt_lim = 300;
        var dur = Date.now() - touchDownT;
        console.log("Touch even duration: " + dur);
		math.sqrt(math.pow(e.touches[0].pageX-touchDownXY[0],2)+math.pow(e.touches[0].pageY-touchDownXY[1],2));
        
    	if(ws.readyState==1){
        	ws.send("End Touch");
        	console.log("End Touch");
        	if(dur<dt_lim){
				ws.send(touchType + " Swipe");
            }
    		document.getElementById("canvas").style.backgroundColor = "white";
    		document.getElementById("header").style.backgroundColor = "white";
      	}
    	else{
        	console.log("Websocket not ready for touch event");
        	}
    }
    
    page.addEventListener('touchstart', multiTouchHandler, false);
//    document.addEventListener('touchmove', watchdogTouchHandler, false);
    page.addEventListener('touchend', endTouchHandler, false);

	// HW Back Button Press Event - modified from app.js to unregister rotary handler from window //
    window.addEventListener( 'tizenhwkey', function( ev ) {
		if( ev.keyName === "back" ) {
			window.removeEventListener("rotarydetent", rotaryEventHandler);	
			var page = document.getElementsByClassName( 'ui-page-active' )[0],
				pageid = page ? page.id : "";
			
			if( pageid === "pageMain" ) {
				try {
					tizen.application.getCurrentApplication().exit();
				} catch (ignore) {
				}
			} else {
				window.history.back();
			}
		}
	} );
	/////////////////////////////////////////////////////////
	
   </script>
   
   
	</div>
	<!-- <script src="app.js"></script> -->
	
	</body>
</html>